!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module polar__user__routines 
    interface polar_user_interface 
        function rad(v_i_) result (r) ! in :ddierckx:../polar.f:polar:unknown_interface
            real :: v_i_
            real :: r
        end function rad
    end interface polar_user_interface
end python module polar__user__routines
python module ddierckx ! in 
    interface  ! in :ddierckx
        subroutine bispeu(tx,nx,ty,ny,c,kx,ky,x,y,z,m,wrk,lwrk,ier) ! in :ddierckx:../bispeu.f
            real dimension(nx) :: tx
            integer, optional,check(len(tx)>=nx),depend(tx) :: nx=len(tx)
            real dimension(ny) :: ty
            integer, optional,check(len(ty)>=ny),depend(ty) :: ny=len(ty)
            real dimension((nx-kx-1)*(ny-ky-1)),depend(nx,ny,kx,ky) :: c
            integer :: kx
            integer :: ky
            real dimension(m) :: x
            real dimension(m),depend(m) :: y
            real dimension(m),depend(m) :: z
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer :: ier
        end subroutine bispeu
        subroutine bispev(tx,nx,ty,ny,c,kx,ky,x,mx,y,my,z,wrk,lwrk,iwrk,kwrk,ier) ! in :ddierckx:../bispev.f
            real dimension(nx) :: tx
            integer, optional,check(len(tx)>=nx),depend(tx) :: nx=len(tx)
            real dimension(ny) :: ty
            integer, optional,check(len(ty)>=ny),depend(ty) :: ny=len(ty)
            real dimension((nx-kx-1)*(ny-ky-1)),depend(nx,ny,kx,ky) :: c
            integer :: kx
            integer :: ky
            real dimension(mx) :: x
            integer, optional,check(len(x)>=mx),depend(x) :: mx=len(x)
            real dimension(my) :: y
            integer, optional,check(len(y)>=my),depend(y) :: my=len(y)
            real dimension(mx*my),depend(mx,my) :: z
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer dimension(kwrk) :: iwrk
            integer, optional,check(len(iwrk)>=kwrk),depend(iwrk) :: kwrk=len(iwrk)
            integer :: ier
        end subroutine bispev
        subroutine clocur(iopt,ipar,idim,m,u,mx,x,w,k,s,nest,n,t,nc,c,fp,wrk,lwrk,iwrk,ier) ! in :ddierckx:../clocur.f
            integer :: iopt
            integer :: ipar
            integer :: idim
            integer, optional,check(len(u)>=m),depend(u) :: m=len(u)
            real dimension(m) :: u
            integer, optional,check(len(x)>=mx),depend(x) :: mx=len(x)
            real dimension(mx) :: x
            real dimension(m),depend(m) :: w
            integer :: k
            real :: s
            integer, optional,check(len(t)>=nest),depend(t) :: nest=len(t)
            integer :: n
            real dimension(nest) :: t
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            real dimension(nc) :: c
            real :: fp
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer dimension(nest),depend(nest) :: iwrk
            integer :: ier
        end subroutine clocur
        subroutine cocosp(m,x,y,w,n,t,e,maxtr,maxbin,c,sq,sx,bind,wrk,lwrk,iwrk,kwrk,ier) ! in :ddierckx:../cocosp.f
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            real dimension(m) :: x
            real dimension(m),depend(m) :: y
            real dimension(m),depend(m) :: w
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            real dimension(n) :: t
            real dimension(n),depend(n) :: e
            integer :: maxtr
            integer :: maxbin
            real dimension(n),depend(n) :: c
            real :: sq
            real dimension(m),depend(m) :: sx
            logical dimension(n),depend(n) :: bind
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer dimension(kwrk) :: iwrk
            integer, optional,check(len(iwrk)>=kwrk),depend(iwrk) :: kwrk=len(iwrk)
            integer :: ier
        end subroutine cocosp
        subroutine concon(iopt,m,x,y,w,v,s,nest,maxtr,maxbin,n,t,c,sq,sx,bind,wrk,lwrk,iwrk,kwrk,ier) ! in :ddierckx:../concon.f
            integer :: iopt
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            real dimension(m) :: x
            real dimension(m),depend(m) :: y
            real dimension(m),depend(m) :: w
            real dimension(m),depend(m) :: v
            real :: s
            integer, optional,check(len(t)>=nest),depend(t) :: nest=len(t)
            integer :: maxtr
            integer :: maxbin
            integer :: n
            real dimension(nest) :: t
            real dimension(nest),depend(nest) :: c
            real :: sq
            real dimension(m),depend(m) :: sx
            logical dimension(nest),depend(nest) :: bind
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer dimension(kwrk) :: iwrk
            integer, optional,check(len(iwrk)>=kwrk),depend(iwrk) :: kwrk=len(iwrk)
            integer :: ier
        end subroutine concon
        subroutine concur(iopt,idim,m,u,mx,x,xx,w,ib,db,nb,ie,de,ne,k,s,nest,n,t,nc,c,np,cp,fp,wrk,lwrk,iwrk,ier) ! in :ddierckx:../concur.f
            integer :: iopt
            integer :: idim
            integer, optional,check(len(u)>=m),depend(u) :: m=len(u)
            real dimension(m) :: u
            integer, optional,check(len(x)>=mx),depend(x) :: mx=len(x)
            real dimension(mx) :: x
            real dimension(mx),depend(mx) :: xx
            real dimension(m),depend(m) :: w
            integer :: ib
            real dimension(nb) :: db
            integer, optional,check(len(db)>=nb),depend(db) :: nb=len(db)
            integer :: ie
            real dimension(ne) :: de
            integer, optional,check(len(de)>=ne),depend(de) :: ne=len(de)
            integer :: k
            real :: s
            integer, optional,check(len(t)>=nest),depend(t) :: nest=len(t)
            integer :: n
            real dimension(nest) :: t
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            real dimension(nc) :: c
            integer, optional,check(len(cp)>=np),depend(cp) :: np=len(cp)
            real dimension(np) :: cp
            real :: fp
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer dimension(nest),depend(nest) :: iwrk
            integer :: ier
        end subroutine concur
        subroutine cualde(idim,t,n,c,nc,k1,u,d,nd,ier) ! in :ddierckx:../cualde.f
            integer :: idim
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            real dimension(nc) :: c
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            integer :: k1
            real :: u
            real dimension(nd) :: d
            integer, optional,check(len(d)>=nd),depend(d) :: nd=len(d)
            integer :: ier
        end subroutine cualde
        subroutine curev(idim,t,n,c,nc,k,u,m,x,mx,ier) ! in :ddierckx:../curev.f
            integer :: idim
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            real dimension(nc) :: c
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            integer :: k
            real dimension(m) :: u
            integer, optional,check(len(u)>=m),depend(u) :: m=len(u)
            real dimension(mx) :: x
            integer, optional,check(len(x)>=mx),depend(x) :: mx=len(x)
            integer :: ier
        end subroutine curev
        subroutine curfit(iopt,m,x,y,w,xb,xe,k,s,nest,n,t,c,fp,wrk,lwrk,iwrk,ier) ! in :ddierckx:../curfit.f
            integer :: iopt
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            real dimension(m) :: x
            real dimension(m),depend(m) :: y
            real dimension(m),depend(m) :: w
            real :: xb
            real :: xe
            integer :: k
            real :: s
            integer, optional,check(len(t)>=nest),depend(t) :: nest=len(t)
            integer intent(out) :: n
            real dimension(nest) :: t
            real dimension(nest),depend(nest) :: c
            real intent(out) :: fp
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer dimension(nest),depend(nest) :: iwrk
            integer intent(out) :: ier
        end subroutine curfit
        function dblint(tx,nx,ty,ny,c,kx,ky,xb,xe,yb,ye,wrk) ! in :ddierckx:../dblint.f
            real dimension(nx) :: tx
            integer, optional,check(len(tx)>=nx),depend(tx) :: nx=len(tx)
            real dimension(ny) :: ty
            integer, optional,check(len(ty)>=ny),depend(ty) :: ny=len(ty)
            real dimension((nx-kx-1)*(ny-ky-1)),depend(nx,ny,kx,ky) :: c
            integer :: kx
            integer :: ky
            real :: xb
            real :: xe
            real :: yb
            real :: ye
            real dimension(nx+ny-kx-ky-2),depend(nx,ny,kx,ky) :: wrk
            real :: dblint
        end function dblint
        function evapol(tu,nu,tv,nv,c,rad,x,y) ! in :ddierckx:../evapol.f
            real dimension(nu) :: tu
            integer, optional,check(len(tu)>=nu),depend(tu) :: nu=len(tu)
            real dimension(nv) :: tv
            integer, optional,check(len(tv)>=nv),depend(tv) :: nv=len(tv)
            real dimension((nu-4)*(nv-4)),depend(nu,nv) :: c
            real :: rad
            real :: x
            real :: y
            real :: evapol
        end function evapol
        subroutine fourco(t,n,c,alfa,m,ress,resc,wrk1,wrk2,ier) ! in :ddierckx:../fourco.f
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            real dimension(n),depend(n) :: c
            real dimension(m) :: alfa
            integer, optional,check(len(alfa)>=m),depend(alfa) :: m=len(alfa)
            real dimension(m),depend(m) :: ress
            real dimension(m),depend(m) :: resc
            real dimension(n),depend(n) :: wrk1
            real dimension(n),depend(n) :: wrk2
            integer :: ier
        end subroutine fourco
        subroutine fpader(t,n,c,k1,x,l,d) ! in :ddierckx:../fpader.f
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            real dimension(n-k1),depend(n,k1) :: c
            integer, optional,check(len(d)>=k1),depend(d) :: k1=len(d)
            real :: x
            integer :: l
            real dimension(k1) :: d
        end subroutine fpader
        subroutine fpadno(maxtr,up,left,right,info,count,merk,jbind,n1,ier) ! in :ddierckx:../fpadno.f
            integer, optional,check(len(up)>=maxtr),depend(up) :: maxtr=len(up)
            integer dimension(maxtr) :: up
            integer dimension(maxtr),depend(maxtr) :: left
            integer dimension(maxtr),depend(maxtr) :: right
            integer dimension(maxtr),depend(maxtr) :: info
            integer :: count
            integer :: merk
            integer dimension(n1) :: jbind
            integer, optional,check(len(jbind)>=n1),depend(jbind) :: n1=len(jbind)
            integer :: ier
        end subroutine fpadno
        subroutine fpadpo(idim,t,n,c,nc,k,cp,np,cc,t1,t2) ! in :ddierckx:../fpadpo.f
            integer :: idim
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            real dimension(nc) :: c
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            integer :: k
            real dimension(np) :: cp
            integer, optional,check(len(cp)>=np),depend(cp) :: np=len(cp)
            real dimension(nc),depend(nc) :: cc
            real dimension(n),depend(n) :: t1
            real dimension(n),depend(n) :: t2
        end subroutine fpadpo
        subroutine fpback(a,z,n,k,c,nest) ! in :ddierckx:../fpback.f
            real dimension(nest,k) :: a
            real dimension(n) :: z
            integer, optional,check(len(z)>=n),depend(z) :: n=len(z)
            integer, optional,check(shape(a,1)==k),depend(a) :: k=shape(a,1)
            real dimension(n),depend(n) :: c
            integer, optional,check(shape(a,0)==nest),depend(a) :: nest=shape(a,0)
        end subroutine fpback
        subroutine fpbacp(a,b,z,n,k,c,k1,nest) ! in :ddierckx:../fpbacp.f
            real dimension(nest,k1) :: a
            real dimension(nest,k),depend(nest) :: b
            real dimension(n) :: z
            integer, optional,check(len(z)>=n),depend(z) :: n=len(z)
            integer, optional,check(shape(b,1)==k),depend(b) :: k=shape(b,1)
            real dimension(n),depend(n) :: c
            integer, optional,check(shape(a,1)==k1),depend(a) :: k1=shape(a,1)
            integer, optional,check(shape(a,0)==nest),depend(a) :: nest=shape(a,0)
        end subroutine fpbacp
        subroutine fpbfou(t,n,par,ress,resc) ! in :ddierckx:../fpbfout.f
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            real :: par
            real dimension(n),depend(n) :: ress
            real dimension(n),depend(n) :: resc
        end subroutine fpbfou
        subroutine fpbisp(tx,nx,ty,ny,c,kx,ky,x,mx,y,my,z,wx,wy,lx,ly) ! in :ddierckx:../fpbisp.f
            real dimension(nx) :: tx
            integer, optional,check(len(tx)>=nx),depend(tx) :: nx=len(tx)
            real dimension(ny) :: ty
            integer, optional,check(len(ty)>=ny),depend(ty) :: ny=len(ty)
            real dimension((nx-kx-1)*(ny-ky-1)),depend(nx,ny,kx,ky) :: c
            integer, optional,check((shape(wx,1)-1)==kx),depend(wx) :: kx=(shape(wx,1)-1)
            integer, optional,check((shape(wy,1)-1)==ky),depend(wy) :: ky=(shape(wy,1)-1)
            real dimension(mx) :: x
            integer, optional,check(len(x)>=mx),depend(x) :: mx=len(x)
            real dimension(my) :: y
            integer, optional,check(len(y)>=my),depend(y) :: my=len(y)
            real dimension(mx*my),depend(mx,my) :: z
            real dimension(mx,kx + 1),depend(mx) :: wx
            real dimension(my,ky + 1),depend(my) :: wy
            integer dimension(mx),depend(mx) :: lx
            integer dimension(my),depend(my) :: ly
        end subroutine fpbisp
        subroutine fpbspl(t,n,k,x,l,h) ! in :ddierckx:../fpbspl.f
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            integer :: k
            real :: x
            integer :: l
            real dimension(6) :: h
        end subroutine fpbspl
        subroutine fpchec(x,m,t,n,k,ier) ! in :ddierckx:../fpchec.f
            real dimension(m) :: x
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            integer :: k
            integer :: ier
        end subroutine fpchec
        subroutine fpched(x,m,t,n,k,ib,ie,ier) ! in :ddierckx:../fpched.f
            real dimension(m) :: x
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            integer :: k
            integer :: ib
            integer :: ie
            integer :: ier
        end subroutine fpched
        subroutine fpchep(x,m,t,n,k,ier) ! in :ddierckx:../fpchep.f
            real dimension(m) :: x
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            integer :: k
            integer :: ier
        end subroutine fpchep
        subroutine fpclos(iopt,idim,m,u,mx,x,w,k,s,nest,tol,maxit,k1,k2,n,t,nc,c,fp,fpint,z,a1,a2,b,g1,g2,q,nrdata,ier) ! in :ddierckx:../fpclos.f
            integer :: iopt
            integer :: idim
            integer, optional,check(len(u)>=m),depend(u) :: m=len(u)
            real dimension(m) :: u
            integer, optional,check(len(x)>=mx),depend(x) :: mx=len(x)
            real dimension(mx) :: x
            real dimension(m),depend(m) :: w
            integer, optional,check(shape(a2,1)==k),depend(a2) :: k=shape(a2,1)
            real :: s
            integer, optional,check(len(t)>=nest),depend(t) :: nest=len(t)
            real :: tol
            integer :: maxit
            integer, optional,check(shape(a1,1)==k1),depend(a1) :: k1=shape(a1,1)
            integer, optional,check(shape(b,1)==k2),depend(b) :: k2=shape(b,1)
            integer :: n
            real dimension(nest) :: t
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            real dimension(nc) :: c
            real :: fp
            real dimension(nest),depend(nest) :: fpint
            real dimension(nc),depend(nc) :: z
            real dimension(nest,k1),depend(nest) :: a1
            real dimension(nest,k),depend(nest) :: a2
            real dimension(nest,k2),depend(nest) :: b
            real dimension(nest,k2),depend(nest,k2) :: g1
            real dimension(nest,k1),depend(nest,k1) :: g2
            real dimension(m,k1),depend(m,k1) :: q
            integer dimension(nest),depend(nest) :: nrdata
            integer :: ier
        end subroutine fpclos
        subroutine fpcoco(iopt,m,x,y,w,v,s,nest,maxtr,maxbin,n,t,c,sq,sx,bind,e,wrk,lwrk,iwrk,kwrk,ier) ! in :ddierckx:../fpcoco.f
            integer :: iopt
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            real dimension(m) :: x
            real dimension(m),depend(m) :: y
            real dimension(m),depend(m) :: w
            real dimension(m),depend(m) :: v
            real :: s
            integer, optional,check(len(t)>=nest),depend(t) :: nest=len(t)
            integer :: maxtr
            integer :: maxbin
            integer :: n
            real dimension(nest) :: t
            real dimension(nest),depend(nest) :: c
            real :: sq
            real dimension(m),depend(m) :: sx
            logical dimension(nest),depend(nest) :: bind
            real dimension(nest),depend(nest) :: e
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer dimension(kwrk) :: iwrk
            integer, optional,check(len(iwrk)>=kwrk),depend(iwrk) :: kwrk=len(iwrk)
            integer :: ier
        end subroutine fpcoco
        subroutine fpcons(iopt,idim,m,u,mx,x,w,ib,ie,k,s,nest,tol,maxit,k1,k2,n,t,nc,c,fp,fpint,z,a,b,g,q,nrdata,ier) ! in :ddierckx:../fpcons.f
            integer :: iopt
            integer :: idim
            integer, optional,check(len(u)>=m),depend(u) :: m=len(u)
            real dimension(m) :: u
            integer, optional,check(len(x)>=mx),depend(x) :: mx=len(x)
            real dimension(mx) :: x
            real dimension(m),depend(m) :: w
            integer :: ib
            integer :: ie
            integer :: k
            real :: s
            integer, optional,check(len(t)>=nest),depend(t) :: nest=len(t)
            real :: tol
            integer :: maxit
            integer, optional,check(shape(a,1)==k1),depend(a) :: k1=shape(a,1)
            integer, optional,check(shape(b,1)==k2),depend(b) :: k2=shape(b,1)
            integer :: n
            real dimension(nest) :: t
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            real dimension(nc) :: c
            real :: fp
            real dimension(nest),depend(nest) :: fpint
            real dimension(nc),depend(nc) :: z
            real dimension(nest,k1),depend(nest) :: a
            real dimension(nest,k2),depend(nest) :: b
            real dimension(nest,k2),depend(nest,k2) :: g
            real dimension(m,k1),depend(m,k1) :: q
            integer dimension(nest),depend(nest) :: nrdata
            integer :: ier
        end subroutine fpcons
        subroutine fpcosp(m,x,y,w,n,t,e,maxtr,maxbin,c,sq,sx,bind,nm,mb,a,b,const_bn,z,zz,u,q,info,up,left,right,jbind,ibind,ier) ! in :ddierckx:../fpcosp.f
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            real dimension(m) :: x
            real dimension(m),depend(m) :: y
            real dimension(m),depend(m) :: w
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            real dimension(n) :: t
            real dimension(n),depend(n) :: e
            integer, optional,check(len(info)>=maxtr),depend(info) :: maxtr=len(info)
            integer, optional,check(shape(b,1)==maxbin),depend(b) :: maxbin=shape(b,1)
            real dimension(n),depend(n) :: c
            real :: sq
            real dimension(m),depend(m) :: sx
            logical dimension(n),depend(n) :: bind
            integer, optional,check(shape(b,0)==nm),depend(b) :: nm=shape(b,0)
            integer, optional,check(len(jbind)>=mb),depend(jbind) :: mb=len(jbind)
            real dimension(n,4),depend(n) :: a
            real dimension(nm,maxbin) :: b
            real dimension(n),depend(n) :: const_bn
            real dimension(n),depend(n) :: z
            real dimension(n),depend(n) :: zz
            real dimension(maxbin),depend(maxbin) :: u
            real dimension(m,4),depend(m) :: q
            integer dimension(maxtr) :: info
            integer dimension(maxtr),depend(maxtr) :: up
            integer dimension(maxtr),depend(maxtr) :: left
            integer dimension(maxtr),depend(maxtr) :: right
            integer dimension(mb) :: jbind
            integer dimension(mb),depend(mb) :: ibind
            integer :: ier
        end subroutine fpcosp
        subroutine fpcsin(a,b,par,sia,coa,sib,cob,ress,resc) ! in :ddierckx:../fpcsin.f
            real :: a
            real :: b
            real :: par
            real :: sia
            real :: coa
            real :: sib
            real :: cob
            real :: ress
            real :: resc
        end subroutine fpcsin
        subroutine fpcurf(iopt,x,y,w,m,xb,xe,k,s,nest,tol,maxit,k1,k2,n,t,c,fp,fpint,z,a,b,g,q,nrdata,ier) ! in :ddierckx:../fpcurf.f
            integer :: iopt
            real dimension(m) :: x
            real dimension(m),depend(m) :: y
            real dimension(m),depend(m) :: w
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            real :: xb
            real :: xe
            integer :: k
            real :: s
            integer, optional,check(len(t)>=nest),depend(t) :: nest=len(t)
            real :: tol
            integer :: maxit
            integer, optional,check(shape(a,1)==k1),depend(a) :: k1=shape(a,1)
            integer, optional,check(shape(b,1)==k2),depend(b) :: k2=shape(b,1)
            integer :: n
            real dimension(nest) :: t
            real dimension(nest),depend(nest) :: c
            real :: fp
            real dimension(nest),depend(nest) :: fpint
            real dimension(nest),depend(nest) :: z
            real dimension(nest,k1),depend(nest) :: a
            real dimension(nest,k2),depend(nest) :: b
            real dimension(nest,k2),depend(nest,k2) :: g
            real dimension(m,k1),depend(m,k1) :: q
            integer dimension(nest),depend(nest) :: nrdata
            integer :: ier
        end subroutine fpcurf
        subroutine fpcuro(a,b,c,d,x,n) ! in :ddierckx:../fpcuro.f
            real :: a
            real :: b
            real :: c
            real :: d
            real dimension(3) :: x
            integer :: n
        end subroutine fpcuro
        subroutine fpcyt1(a,n,nn) ! in :ddierckx:../fpcyt1.f
            real dimension(nn,6) :: a
            integer :: n
            integer, optional,check(shape(a,0)==nn),depend(a) :: nn=shape(a,0)
        end subroutine fpcyt1
        subroutine fpcyt2(a,n,b,c,nn) ! in :ddierckx:../fpcyt2.f
            real dimension(nn,6) :: a
            integer, optional,check(len(b)>=n),depend(b) :: n=len(b)
            real dimension(n) :: b
            real dimension(n),depend(n) :: c
            integer, optional,check(shape(a,0)==nn),depend(a) :: nn=shape(a,0)
        end subroutine fpcyt2
        subroutine fpdeno(maxtr,up,left,right,nbind,merk) ! in :ddierckx:../fpdeno.f
            integer, optional,check(len(up)>=maxtr),depend(up) :: maxtr=len(up)
            integer dimension(maxtr) :: up
            integer dimension(maxtr),depend(maxtr) :: left
            integer dimension(maxtr),depend(maxtr) :: right
            integer :: nbind
            integer :: merk
        end subroutine fpdeno
        subroutine fpdisc(t,n,k2,b,nest) ! in :ddierckx:../fpdisc.f
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            integer, optional,check(shape(b,1)==k2),depend(b) :: k2=shape(b,1)
            real dimension(nest,k2) :: b
            integer, optional,check(shape(b,0)==nest),depend(b) :: nest=shape(b,0)
        end subroutine fpdisc
        subroutine fpfrno(maxtr,up,left,right,info,point,merk,n1,count,ier) ! in :ddierckx:../fpfrno.f
            integer, optional,check(len(up)>=maxtr),depend(up) :: maxtr=len(up)
            integer dimension(maxtr) :: up
            integer dimension(maxtr),depend(maxtr) :: left
            integer dimension(maxtr),depend(maxtr) :: right
            integer dimension(maxtr),depend(maxtr) :: info
            integer :: point
            integer :: merk
            integer :: n1
            integer :: count
            integer :: ier
        end subroutine fpfrno
        subroutine fpgivs(piv,ww,cos,sin) ! in :ddierckx:../fpgivs.f
            real :: piv
            real :: ww
            real :: cos
            real :: sin
        end subroutine fpgivs
        subroutine fpgrdi(ifsu,ifsv,ifbu,ifbv,iback,u,mu,v,mv,z,mz,dz,iop0,iop1,tu,nu,tv,nv,p,c,nc,sq,fp,fpu,fpv,mm,mvnu,spu,spv,right,q,au,av1,av2,bu,bv,aa,bb,cc,cosi,nru,nrv) ! in :ddierckx:../fpgrdi.f
            integer :: ifsu
            integer :: ifsv
            integer :: ifbu
            integer :: ifbv
            integer :: iback
            real dimension(mu) :: u
            integer, optional,check(len(u)>=mu),depend(u) :: mu=len(u)
            real dimension(mv) :: v
            integer, optional,check(len(v)>=mv),depend(v) :: mv=len(v)
            real dimension(mz) :: z
            integer, optional,check(len(z)>=mz),depend(z) :: mz=len(z)
            real dimension(3) :: dz
            integer :: iop0
            integer :: iop1
            real dimension(nu) :: tu
            integer, optional,check(len(tu)>=nu),depend(tu) :: nu=len(tu)
            real dimension(nv) :: tv
            integer, optional,check(len(tv)>=nv),depend(tv) :: nv=len(tv)
            real :: p
            real dimension(nc) :: c
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            real :: sq
            real :: fp
            real dimension(nu),depend(nu) :: fpu
            real dimension(nv),depend(nv) :: fpv
            integer, optional,check(len(right)>=mm),depend(right) :: mm=len(right)
            integer, optional,check(len(q)>=mvnu),depend(q) :: mvnu=len(q)
            real dimension(mu,4),depend(mu) :: spu
            real dimension(mv,4),depend(mv) :: spv
            real dimension(mm) :: right
            real dimension(mvnu) :: q
            real dimension(nu,5),depend(nu) :: au
            real dimension(nv,6),depend(nv) :: av1
            real dimension(nv,4),depend(nv) :: av2
            real dimension(nu,5),depend(nu) :: bu
            real dimension(nv,5),depend(nv) :: bv
            real dimension(2,mv),depend(mv) :: aa
            real dimension(2,nv),depend(nv) :: bb
            real dimension(nv),depend(nv) :: cc
            real dimension(2,nv),depend(nv) :: cosi
            integer dimension(mu),depend(mu) :: nru
            integer dimension(mv),depend(mv) :: nrv
        end subroutine fpgrdi
        subroutine fpgrpa(ifsu,ifsv,ifbu,ifbv,idim,ipar,u,mu,v,mv,z,mz,tu,nu,tv,nv,p,c,nc,fp,fpu,fpv,mm,mvnu,spu,spv,right,q,au,au1,av,av1,bu,bv,nru,nrv) ! in :ddierckx:../fpgrpa.f
            integer :: ifsu
            integer :: ifsv
            integer :: ifbu
            integer :: ifbv
            integer :: idim
            integer dimension(2) :: ipar
            real dimension(mu) :: u
            integer, optional,check(len(u)>=mu),depend(u) :: mu=len(u)
            real dimension(mv) :: v
            integer, optional,check(len(v)>=mv),depend(v) :: mv=len(v)
            real dimension(mz*idim),depend(idim,mz) :: z
            integer :: mz
            real dimension(nu) :: tu
            integer, optional,check(len(tu)>=nu),depend(tu) :: nu=len(tu)
            real dimension(nv) :: tv
            integer, optional,check(len(tv)>=nv),depend(tv) :: nv=len(tv)
            real :: p
            real dimension(nc*idim),depend(idim,nc) :: c
            integer :: nc
            real :: fp
            real dimension(nu),depend(nu) :: fpu
            real dimension(nv),depend(nv) :: fpv
            integer :: mm
            integer, optional,check(len(q)>=mvnu),depend(q) :: mvnu=len(q)
            real dimension(mu,4),depend(mu) :: spu
            real dimension(mv,4),depend(mv) :: spv
            real dimension(mm*idim),depend(idim,mm) :: right
            real dimension(mvnu) :: q
            real dimension(nu,5),depend(nu) :: au
            real dimension(nu,4),depend(nu) :: au1
            real dimension(nv,5),depend(nv) :: av
            real dimension(nv,4),depend(nv) :: av1
            real dimension(nu,5),depend(nu) :: bu
            real dimension(nv,5),depend(nv) :: bv
            integer dimension(mu),depend(mu) :: nru
            integer dimension(mv),depend(mv) :: nrv
        end subroutine fpgrpa
        subroutine fpgrre(ifsx,ifsy,ifbx,ifby,x,mx,y,my,z,mz,kx,ky,tx,nx,ty,ny,p,c,nc,fp,fpx,fpy,mm,mynx,kx1,kx2,ky1,ky2,spx,spy,right,q,ax,ay,bx,by,nrx,nry) ! in :ddierckx:../fpgrre.f
            integer :: ifsx
            integer :: ifsy
            integer :: ifbx
            integer :: ifby
            real dimension(mx) :: x
            integer, optional,check(len(x)>=mx),depend(x) :: mx=len(x)
            real dimension(my) :: y
            integer, optional,check(len(y)>=my),depend(y) :: my=len(y)
            real dimension(mz) :: z
            integer, optional,check(len(z)>=mz),depend(z) :: mz=len(z)
            integer :: kx
            integer :: ky
            real dimension(nx) :: tx
            integer, optional,check(len(tx)>=nx),depend(tx) :: nx=len(tx)
            real dimension(ny) :: ty
            integer, optional,check(len(ty)>=ny),depend(ty) :: ny=len(ty)
            real :: p
            real dimension(nc) :: c
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            real :: fp
            real dimension(nx),depend(nx) :: fpx
            real dimension(ny),depend(ny) :: fpy
            integer, optional,check(len(right)>=mm),depend(right) :: mm=len(right)
            integer, optional,check(len(q)>=mynx),depend(q) :: mynx=len(q)
            integer, optional,check(shape(spx,1)==kx1),depend(spx) :: kx1=shape(spx,1)
            integer, optional,check(shape(ax,1)==kx2),depend(ax) :: kx2=shape(ax,1)
            integer, optional,check(shape(spy,1)==ky1),depend(spy) :: ky1=shape(spy,1)
            integer, optional,check(shape(ay,1)==ky2),depend(ay) :: ky2=shape(ay,1)
            real dimension(mx,kx1),depend(mx) :: spx
            real dimension(my,ky1),depend(my) :: spy
            real dimension(mm) :: right
            real dimension(mynx) :: q
            real dimension(nx,kx2),depend(nx) :: ax
            real dimension(ny,ky2),depend(ny) :: ay
            real dimension(nx,kx2),depend(nx,kx2) :: bx
            real dimension(ny,ky2),depend(ny,ky2) :: by
            integer dimension(mx),depend(mx) :: nrx
            integer dimension(my),depend(my) :: nry
        end subroutine fpgrre
        subroutine fpgrsp(ifsu,ifsv,ifbu,ifbv,iback,u,mu,v,mv,r,mr,dr,iop0,iop1,tu,nu,tv,nv,p,c,nc,sq,fp,fpu,fpv,mm,mvnu,spu,spv,right,q,au,av1,av2,bu,bv,a0,a1,b0,b1,c0,c1,cosi,nru,nrv) ! in :ddierckx:../fpgrsp.f
            integer :: ifsu
            integer :: ifsv
            integer :: ifbu
            integer :: ifbv
            integer :: iback
            real dimension(mu) :: u
            integer, optional,check(len(u)>=mu),depend(u) :: mu=len(u)
            real dimension(mv) :: v
            integer, optional,check(len(v)>=mv),depend(v) :: mv=len(v)
            real dimension(mr) :: r
            integer, optional,check(len(r)>=mr),depend(r) :: mr=len(r)
            real dimension(6) :: dr
            integer :: iop0
            integer :: iop1
            real dimension(nu) :: tu
            integer, optional,check(len(tu)>=nu),depend(tu) :: nu=len(tu)
            real dimension(nv) :: tv
            integer, optional,check(len(tv)>=nv),depend(tv) :: nv=len(tv)
            real :: p
            real dimension(nc) :: c
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            real :: sq
            real :: fp
            real dimension(nu),depend(nu) :: fpu
            real dimension(nv),depend(nv) :: fpv
            integer, optional,check(len(right)>=mm),depend(right) :: mm=len(right)
            integer, optional,check(len(q)>=mvnu),depend(q) :: mvnu=len(q)
            real dimension(mu,4),depend(mu) :: spu
            real dimension(mv,4),depend(mv) :: spv
            real dimension(mm) :: right
            real dimension(mvnu) :: q
            real dimension(nu,5),depend(nu) :: au
            real dimension(nv,6),depend(nv) :: av1
            real dimension(nv,4),depend(nv) :: av2
            real dimension(nu,5),depend(nu) :: bu
            real dimension(nv,5),depend(nv) :: bv
            real dimension(2,mv),depend(mv) :: a0
            real dimension(2,mv),depend(mv) :: a1
            real dimension(2,nv),depend(nv) :: b0
            real dimension(2,nv),depend(nv) :: b1
            real dimension(nv),depend(nv) :: c0
            real dimension(nv),depend(nv) :: c1
            real dimension(2,nv),depend(nv) :: cosi
            integer dimension(mu),depend(mu) :: nru
            integer dimension(mv),depend(mv) :: nrv
        end subroutine fpgrsp
        subroutine fpinst(iopt,t,n,c,k,x,l,tt,nn,cc,nest) ! in :ddierckx:../fpinst.f
            integer :: iopt
            real dimension(nest) :: t
            integer :: n
            real dimension(nest),depend(nest) :: c
            integer :: k
            real :: x
            integer :: l
            real dimension(nest),depend(nest) :: tt
            integer :: nn
            real dimension(nest),depend(nest) :: cc
            integer, optional,check(len(t)>=nest),depend(t) :: nest=len(t)
        end subroutine fpinst
        subroutine fpintb(t,n,bint,nk1,x,y) ! in :ddierckx:../fpintb.f
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            real dimension(nk1) :: bint
            integer, optional,check(len(bint)>=nk1),depend(bint) :: nk1=len(bint)
            real :: x
            real :: y
        end subroutine fpintb
        subroutine fpknot(x,m,t,n,fpint,nrdata,nrint,nest,istart) ! in :ddierckx:../fpknot.f
            real dimension(m) :: x
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            real dimension(nest) :: t
            integer :: n
            real dimension(nest),depend(nest) :: fpint
            integer dimension(nest),depend(nest) :: nrdata
            integer :: nrint
            integer, optional,check(len(t)>=nest),depend(t) :: nest=len(t)
            integer :: istart
        end subroutine fpknot
        subroutine fpopdi(ifsu,ifsv,ifbu,ifbv,u,mu,v,mv,z,mz,z0,dz,iopt,ider,tu,nu,tv,nv,nuest,nvest,p,step,c,nc,fp,fpu,fpv,nru,nrv,wrk,lwrk) ! in :ddierckx:../fpopdi.f
            integer :: ifsu
            integer :: ifsv
            integer :: ifbu
            integer :: ifbv
            real dimension(mu) :: u
            integer, optional,check(len(u)>=mu),depend(u) :: mu=len(u)
            real dimension(mv) :: v
            integer, optional,check(len(v)>=mv),depend(v) :: mv=len(v)
            real dimension(mz) :: z
            integer, optional,check(len(z)>=mz),depend(z) :: mz=len(z)
            real :: z0
            real dimension(3) :: dz
            integer dimension(3) :: iopt
            integer dimension(2) :: ider
            real dimension(nu) :: tu
            integer, optional,check(len(tu)>=nu),depend(tu) :: nu=len(tu)
            real dimension(nv) :: tv
            integer, optional,check(len(tv)>=nv),depend(tv) :: nv=len(tv)
            integer :: nuest
            integer :: nvest
            real :: p
            real :: step
            real dimension(nc) :: c
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            real :: fp
            real dimension(nu),depend(nu) :: fpu
            real dimension(nv),depend(nv) :: fpv
            integer dimension(mu),depend(mu) :: nru
            integer dimension(mv),depend(mv) :: nrv
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
        end subroutine fpopdi
        subroutine fpopsp(ifsu,ifsv,ifbu,ifbv,u,mu,v,mv,r,mr,r0,r1,dr,iopt,ider,tu,nu,tv,nv,nuest,nvest,p,step,c,nc,fp,fpu,fpv,nru,nrv,wrk,lwrk) ! in :ddierckx:../fpopsp.f
            integer :: ifsu
            integer :: ifsv
            integer :: ifbu
            integer :: ifbv
            real dimension(mu) :: u
            integer, optional,check(len(u)>=mu),depend(u) :: mu=len(u)
            real dimension(mv) :: v
            integer, optional,check(len(v)>=mv),depend(v) :: mv=len(v)
            real dimension(mr) :: r
            integer, optional,check(len(r)>=mr),depend(r) :: mr=len(r)
            real :: r0
            real :: r1
            real dimension(6) :: dr
            integer dimension(3) :: iopt
            integer dimension(4) :: ider
            real dimension(nu) :: tu
            integer, optional,check(len(tu)>=nu),depend(tu) :: nu=len(tu)
            real dimension(nv) :: tv
            integer, optional,check(len(tv)>=nv),depend(tv) :: nv=len(tv)
            integer :: nuest
            integer :: nvest
            real :: p
            real dimension(2) :: step
            real dimension(nc) :: c
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            real :: fp
            real dimension(nu),depend(nu) :: fpu
            real dimension(nv),depend(nv) :: fpv
            integer dimension(mu),depend(mu) :: nru
            integer dimension(mv),depend(mv) :: nrv
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
        end subroutine fpopsp
        subroutine fporde(x,y,m,kx,ky,tx,nx,ty,ny,nummer,index_bn,nreg) ! in :ddierckx:../fporde.f
            real dimension(m) :: x
            real dimension(m),depend(m) :: y
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            integer :: kx
            integer :: ky
            real dimension(nx) :: tx
            integer, optional,check(len(tx)>=nx),depend(tx) :: nx=len(tx)
            real dimension(ny) :: ty
            integer, optional,check(len(ty)>=ny),depend(ty) :: ny=len(ty)
            integer dimension(m),depend(m) :: nummer
            integer dimension(nreg) :: index_bn
            integer, optional,check(len(index_bn)>=nreg),depend(index_bn) :: nreg=len(index_bn)
        end subroutine fporde
        subroutine fppara(iopt,idim,m,u,mx,x,w,ub,ue,k,s,nest,tol,maxit,k1,k2,n,t,nc,c,fp,fpint,z,a,b,g,q,nrdata,ier) ! in :ddierckx:../fppara.f
            integer :: iopt
            integer :: idim
            integer, optional,check(len(u)>=m),depend(u) :: m=len(u)
            real dimension(m) :: u
            integer, optional,check(len(x)>=mx),depend(x) :: mx=len(x)
            real dimension(mx) :: x
            real dimension(m),depend(m) :: w
            real :: ub
            real :: ue
            integer :: k
            real :: s
            integer, optional,check(len(t)>=nest),depend(t) :: nest=len(t)
            real :: tol
            integer :: maxit
            integer, optional,check(shape(a,1)==k1),depend(a) :: k1=shape(a,1)
            integer, optional,check(shape(b,1)==k2),depend(b) :: k2=shape(b,1)
            integer :: n
            real dimension(nest) :: t
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            real dimension(nc) :: c
            real :: fp
            real dimension(nest),depend(nest) :: fpint
            real dimension(nc),depend(nc) :: z
            real dimension(nest,k1),depend(nest) :: a
            real dimension(nest,k2),depend(nest) :: b
            real dimension(nest,k2),depend(nest,k2) :: g
            real dimension(m,k1),depend(m,k1) :: q
            integer dimension(nest),depend(nest) :: nrdata
            integer :: ier
        end subroutine fppara
        subroutine fppasu(iopt,ipar,idim,u,mu,v,mv,z,mz,s,nuest,nvest,tol,maxit,nc,nu,tu,nv,tv,c,fp,fp0,fpold,reducu,reducv,fpintu,fpintv,lastdi,nplusu,nplusv,nru,nrv,nrdatu,nrdatv,wrk,lwrk,ier) ! in :ddierckx:../fppasu.f
            integer :: iopt
            integer dimension(2) :: ipar
            integer :: idim
            real dimension(mu) :: u
            integer, optional,check(len(u)>=mu),depend(u) :: mu=len(u)
            real dimension(mv) :: v
            integer, optional,check(len(v)>=mv),depend(v) :: mv=len(v)
            real dimension(mz*idim),depend(idim,mz) :: z
            integer :: mz
            real :: s
            integer, optional,check(len(tu)>=nuest),depend(tu) :: nuest=len(tu)
            integer, optional,check(len(tv)>=nvest),depend(tv) :: nvest=len(tv)
            real :: tol
            integer :: maxit
            integer :: nc
            integer :: nu
            real dimension(nuest) :: tu
            integer :: nv
            real dimension(nvest) :: tv
            real dimension(nc*idim),depend(idim,nc) :: c
            real :: fp
            real :: fp0
            real :: fpold
            real :: reducu
            real :: reducv
            real dimension(nuest),depend(nuest) :: fpintu
            real dimension(nvest),depend(nvest) :: fpintv
            integer :: lastdi
            integer :: nplusu
            integer :: nplusv
            integer dimension(mu),depend(mu) :: nru
            integer dimension(mv),depend(mv) :: nrv
            integer dimension(nuest),depend(nuest) :: nrdatu
            integer dimension(nvest),depend(nvest) :: nrdatv
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer :: ier
        end subroutine fppasu
        subroutine fpperi(iopt,x,y,w,m,k,s,nest,tol,maxit,k1,k2,n,t,c,fp,fpint,z,a1,a2,b,g1,g2,q,nrdata,ier) ! in :ddierckx:../fpperi.f
            integer :: iopt
            real dimension(m) :: x
            real dimension(m),depend(m) :: y
            real dimension(m),depend(m) :: w
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            integer, optional,check(shape(a2,1)==k),depend(a2) :: k=shape(a2,1)
            real :: s
            integer, optional,check(len(t)>=nest),depend(t) :: nest=len(t)
            real :: tol
            integer :: maxit
            integer, optional,check(shape(a1,1)==k1),depend(a1) :: k1=shape(a1,1)
            integer, optional,check(shape(b,1)==k2),depend(b) :: k2=shape(b,1)
            integer :: n
            real dimension(nest) :: t
            real dimension(nest),depend(nest) :: c
            real :: fp
            real dimension(nest),depend(nest) :: fpint
            real dimension(nest),depend(nest) :: z
            real dimension(nest,k1),depend(nest) :: a1
            real dimension(nest,k),depend(nest) :: a2
            real dimension(nest,k2),depend(nest) :: b
            real dimension(nest,k2),depend(nest,k2) :: g1
            real dimension(nest,k1),depend(nest,k1) :: g2
            real dimension(m,k1),depend(m,k1) :: q
            integer dimension(nest),depend(nest) :: nrdata
            integer :: ier
        end subroutine fpperi
        subroutine fppocu(idim,k,a,b,ib,db,nb,ie,de,ne,cp,np) ! in :ddierckx:../fppocu.f
            integer :: idim
            integer :: k
            real :: a
            real :: b
            integer :: ib
            real dimension(nb) :: db
            integer, optional,check(len(db)>=nb),depend(db) :: nb=len(db)
            integer :: ie
            real dimension(ne) :: de
            integer, optional,check(len(de)>=ne),depend(de) :: ne=len(de)
            real dimension(np) :: cp
            integer, optional,check(len(cp)>=np),depend(cp) :: np=len(cp)
        end subroutine fppocu
        subroutine fppogr(iopt,ider,u,mu,v,mv,z,mz,z0,r,s,nuest,nvest,tol,maxit,nc,nu,tu,nv,tv,c,fp,fp0,fpold,reducu,reducv,fpintu,fpintv,dz,step,lastdi,nplusu,nplusv,lasttu,nru,nrv,nrdatu,nrdatv,wrk,lwrk,ier) ! in :ddierckx:../fppogr.f
            integer dimension(3) :: iopt
            integer dimension(2) :: ider
            real dimension(mu) :: u
            integer, optional,check(len(u)>=mu),depend(u) :: mu=len(u)
            real dimension(mv) :: v
            integer, optional,check(len(v)>=mv),depend(v) :: mv=len(v)
            real dimension(mz) :: z
            integer, optional,check(len(z)>=mz),depend(z) :: mz=len(z)
            real :: z0
            real :: r
            real :: s
            integer, optional,check(len(tu)>=nuest),depend(tu) :: nuest=len(tu)
            integer, optional,check(len(tv)>=nvest),depend(tv) :: nvest=len(tv)
            real :: tol
            integer :: maxit
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            integer :: nu
            real dimension(nuest) :: tu
            integer :: nv
            real dimension(nvest) :: tv
            real dimension(nc) :: c
            real :: fp
            real :: fp0
            real :: fpold
            real :: reducu
            real :: reducv
            real dimension(nuest),depend(nuest) :: fpintu
            real dimension(nvest),depend(nvest) :: fpintv
            real dimension(3) :: dz
            real :: step
            integer :: lastdi
            integer :: nplusu
            integer :: nplusv
            integer :: lasttu
            integer dimension(mu),depend(mu) :: nru
            integer dimension(mv),depend(mv) :: nrv
            integer dimension(nuest),depend(nuest) :: nrdatu
            integer dimension(nvest),depend(nvest) :: nrdatv
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer :: ier
        end subroutine fppogr
        subroutine fppola(iopt1,iopt2,iopt3,m,u,v,z,w,rad,s,nuest,nvest,eta,tol,maxit,ib1,ib3,nc,ncc,intest,nrest,nu,tu,nv,tv,c,fp,sup,fpint,coord,f,ff,row,cs,cosi,a,q,bu,bv,spu,spv,h,index_bn,nummer,wrk,lwrk,ier) ! in :ddierckx:../fppola.f
            integer :: iopt1
            integer :: iopt2
            integer :: iopt3
            integer, optional,check(len(u)>=m),depend(u) :: m=len(u)
            real dimension(m) :: u
            real dimension(m),depend(m) :: v
            real dimension(m),depend(m) :: z
            real dimension(m),depend(m) :: w
            real :: rad
            real :: s
            integer, optional,check(len(tu)>=nuest),depend(tu) :: nuest=len(tu)
            integer, optional,check(len(tv)>=nvest),depend(tv) :: nvest=len(tv)
            real :: eta
            real :: tol
            integer :: maxit
            integer, optional,check(shape(a,1)==ib1),depend(a) :: ib1=shape(a,1)
            integer, optional,check(shape(q,1)==ib3),depend(q) :: ib3=shape(q,1)
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            integer, optional,check(len(f)>=ncc),depend(f) :: ncc=len(f)
            integer, optional,check(len(fpint)>=intest),depend(fpint) :: intest=len(fpint)
            integer, optional,check(len(index_bn)>=nrest),depend(index_bn) :: nrest=len(index_bn)
            integer :: nu
            real dimension(nuest) :: tu
            integer :: nv
            real dimension(nvest) :: tv
            real dimension(nc) :: c
            real :: fp
            real :: sup
            real dimension(intest) :: fpint
            real dimension(intest),depend(intest) :: coord
            real dimension(ncc) :: f
            real dimension(nc),depend(nc) :: ff
            real dimension(nvest),depend(nvest) :: row
            real dimension(nvest),depend(nvest) :: cs
            real dimension(5,nvest),depend(nvest) :: cosi
            real dimension(ncc,ib1),depend(ncc) :: a
            real dimension(ncc,ib3),depend(ncc) :: q
            real dimension(nuest,5),depend(nuest) :: bu
            real dimension(nvest,5),depend(nvest) :: bv
            real dimension(m,4),depend(m) :: spu
            real dimension(m,4),depend(m) :: spv
            real dimension(ib3),depend(ib3) :: h
            integer dimension(nrest) :: index_bn
            integer dimension(m),depend(m) :: nummer
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer :: ier
        end subroutine fppola
        subroutine fprank(a,f,n,m,na,tol,c,sq,rank_bn,aa,ff,h) ! in :ddierckx:../fprank.f
            real dimension(na,m) :: a
            real dimension(n) :: f
            integer, optional,check(len(f)>=n),depend(f) :: n=len(f)
            integer, optional,check(shape(a,1)==m),depend(a) :: m=shape(a,1)
            integer, optional,check(shape(a,0)==na),depend(a) :: na=shape(a,0)
            real :: tol
            real dimension(n),depend(n) :: c
            real :: sq
            integer :: rank_bn
            real dimension(n,m),depend(n,m) :: aa
            real dimension(n),depend(n) :: ff
            real dimension(m),depend(m) :: h
        end subroutine fprank
        function fprati(p1,f1,p2,f2,p3,f3) ! in :ddierckx:../fprati.f
            real :: p1
            real :: f1
            real :: p2
            real :: f2
            real :: p3
            real :: f3
            real :: fprati
        end function fprati
        subroutine fpregr(iopt,x,mx,y,my,z,mz,xb,xe,yb,ye,kx,ky,s,nxest,nyest,tol,maxit,nc,nx,tx,ny,ty,c,fp,fp0,fpold,reducx,reducy,fpintx,fpinty,lastdi,nplusx,nplusy,nrx,nry,nrdatx,nrdaty,wrk,lwrk,ier) ! in :ddierckx:../fpregr.f
            integer :: iopt
            real dimension(mx) :: x
            integer, optional,check(len(x)>=mx),depend(x) :: mx=len(x)
            real dimension(my) :: y
            integer, optional,check(len(y)>=my),depend(y) :: my=len(y)
            real dimension(mz) :: z
            integer, optional,check(len(z)>=mz),depend(z) :: mz=len(z)
            real :: xb
            real :: xe
            real :: yb
            real :: ye
            integer :: kx
            integer :: ky
            real :: s
            integer, optional,check(len(tx)>=nxest),depend(tx) :: nxest=len(tx)
            integer, optional,check(len(ty)>=nyest),depend(ty) :: nyest=len(ty)
            real :: tol
            integer :: maxit
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            integer :: nx
            real dimension(nxest) :: tx
            integer :: ny
            real dimension(nyest) :: ty
            real dimension(nc) :: c
            real :: fp
            real :: fp0
            real :: fpold
            real :: reducx
            real :: reducy
            real dimension(nxest),depend(nxest) :: fpintx
            real dimension(nyest),depend(nyest) :: fpinty
            integer :: lastdi
            integer :: nplusx
            integer :: nplusy
            integer dimension(mx),depend(mx) :: nrx
            integer dimension(my),depend(my) :: nry
            integer dimension(nxest),depend(nxest) :: nrdatx
            integer dimension(nyest),depend(nyest) :: nrdaty
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer :: ier
        end subroutine fpregr
        subroutine fprota(cos,sin,a,b) ! in :ddierckx:../fprota.f
            real :: cos
            real :: sin
            real :: a
            real :: b
        end subroutine fprota
        subroutine fprppo(nu,nv,if1,if2,cosi,ratio,c,f,ncoff) ! in :ddierckx:../fprppo.f
            integer :: nu
            integer, optional,check(shape(cosi,1)==nv),depend(cosi) :: nv=shape(cosi,1)
            integer :: if1
            integer :: if2
            real dimension(5,nv) :: cosi
            real :: ratio
            real dimension(ncoff) :: c
            real dimension(ncoff),depend(ncoff) :: f
            integer, optional,check(len(c)>=ncoff),depend(c) :: ncoff=len(c)
        end subroutine fprppo
        subroutine fprpsp(nt,np,co,si,c,f,ncoff) ! in :ddierckx:../fprpsp.f
            integer :: nt
            integer, optional,check(len(co)>=np),depend(co) :: np=len(co)
            real dimension(np) :: co
            real dimension(np),depend(np) :: si
            real dimension(ncoff) :: c
            real dimension(ncoff),depend(ncoff) :: f
            integer, optional,check(len(c)>=ncoff),depend(c) :: ncoff=len(c)
        end subroutine fprpsp
        subroutine fpseno(maxtr,up,left,right,info,merk,ibind,nbind) ! in :ddierckx:../fpseno.f
            integer, optional,check(len(up)>=maxtr),depend(up) :: maxtr=len(up)
            integer dimension(maxtr) :: up
            integer dimension(maxtr),depend(maxtr) :: left
            integer dimension(maxtr),depend(maxtr) :: right
            integer dimension(maxtr),depend(maxtr) :: info
            integer :: merk
            integer dimension(nbind) :: ibind
            integer, optional,check(len(ibind)>=nbind),depend(ibind) :: nbind=len(ibind)
        end subroutine fpseno
        subroutine fpspgr(iopt,ider,u,mu,v,mv,r,mr,r0,r1,s,nuest,nvest,tol,maxit,nc,nu,tu,nv,tv,c,fp,fp0,fpold,reducu,reducv,fpintu,fpintv,dr,step,lastdi,nplusu,nplusv,lastu0,lastu1,nru,nrv,nrdatu,nrdatv,wrk,lwrk,ier) ! in :ddierckx:../fpspgr.f
            integer dimension(3) :: iopt
            integer dimension(4) :: ider
            real dimension(mu) :: u
            integer, optional,check(len(u)>=mu),depend(u) :: mu=len(u)
            real dimension(mv) :: v
            integer, optional,check(len(v)>=mv),depend(v) :: mv=len(v)
            real dimension(mr) :: r
            integer, optional,check(len(r)>=mr),depend(r) :: mr=len(r)
            real :: r0
            real :: r1
            real :: s
            integer, optional,check(len(tu)>=nuest),depend(tu) :: nuest=len(tu)
            integer, optional,check(len(tv)>=nvest),depend(tv) :: nvest=len(tv)
            real :: tol
            integer :: maxit
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            integer :: nu
            real dimension(nuest) :: tu
            integer :: nv
            real dimension(nvest) :: tv
            real dimension(nc) :: c
            real :: fp
            real :: fp0
            real :: fpold
            real :: reducu
            real :: reducv
            real dimension(nuest),depend(nuest) :: fpintu
            real dimension(nvest),depend(nvest) :: fpintv
            real dimension(6) :: dr
            real dimension(2) :: step
            integer :: lastdi
            integer :: nplusu
            integer :: nplusv
            integer :: lastu0
            integer :: lastu1
            integer dimension(mu),depend(mu) :: nru
            integer dimension(mv),depend(mv) :: nrv
            integer dimension(nuest),depend(nuest) :: nrdatu
            integer dimension(nvest),depend(nvest) :: nrdatv
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer :: ier
        end subroutine fpspgr
        subroutine fpsphe(iopt,m,teta,phi,r,w,s,ntest,npest,eta,tol,maxit,ib1,ib3,nc,ncc,intest,nrest,nt,tt,np,tp,c,fp,sup,fpint,coord,f,ff,row,coco,cosi,a,q,bt,bp,spt,spp,h,index_bn,nummer,wrk,lwrk,ier) ! in :ddierckx:../fpsphe.f
            integer :: iopt
            integer, optional,check(len(teta)>=m),depend(teta) :: m=len(teta)
            real dimension(m) :: teta
            real dimension(m),depend(m) :: phi
            real dimension(m),depend(m) :: r
            real dimension(m),depend(m) :: w
            real :: s
            integer, optional,check(len(tt)>=ntest),depend(tt) :: ntest=len(tt)
            integer, optional,check(len(tp)>=npest),depend(tp) :: npest=len(tp)
            real :: eta
            real :: tol
            integer :: maxit
            integer, optional,check(shape(a,1)==ib1),depend(a) :: ib1=shape(a,1)
            integer, optional,check(shape(q,1)==ib3),depend(q) :: ib3=shape(q,1)
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            integer, optional,check(len(f)>=ncc),depend(f) :: ncc=len(f)
            integer, optional,check(len(fpint)>=intest),depend(fpint) :: intest=len(fpint)
            integer, optional,check(len(index_bn)>=nrest),depend(index_bn) :: nrest=len(index_bn)
            integer :: nt
            real dimension(ntest) :: tt
            integer :: np
            real dimension(npest) :: tp
            real dimension(nc) :: c
            real :: fp
            real :: sup
            real dimension(intest) :: fpint
            real dimension(intest),depend(intest) :: coord
            real dimension(ncc) :: f
            real dimension(nc),depend(nc) :: ff
            real dimension(npest),depend(npest) :: row
            real dimension(npest),depend(npest) :: coco
            real dimension(npest),depend(npest) :: cosi
            real dimension(ncc,ib1),depend(ncc) :: a
            real dimension(ncc,ib3),depend(ncc) :: q
            real dimension(ntest,5),depend(ntest) :: bt
            real dimension(npest,5),depend(npest) :: bp
            real dimension(m,4),depend(m) :: spt
            real dimension(m,4),depend(m) :: spp
            real dimension(ib3),depend(ib3) :: h
            integer dimension(nrest) :: index_bn
            integer dimension(m),depend(m) :: nummer
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer :: ier
        end subroutine fpsphe
        subroutine fpsuev(idim,tu,nu,tv,nv,c,u,mu,v,mv,f,wu,wv,lu,lv) ! in :ddierckx:../fpsuev.f
            integer :: idim
            real dimension(nu) :: tu
            integer, optional,check(len(tu)>=nu),depend(tu) :: nu=len(tu)
            real dimension(nv) :: tv
            integer, optional,check(len(tv)>=nv),depend(tv) :: nv=len(tv)
            real dimension((nu-4)*(nv-4)*idim),depend(idim,nu,nv) :: c
            real dimension(mu) :: u
            integer, optional,check(len(u)>=mu),depend(u) :: mu=len(u)
            real dimension(mv) :: v
            integer, optional,check(len(v)>=mv),depend(v) :: mv=len(v)
            real dimension(mu*mv*idim),depend(idim,mu,mv) :: f
            real dimension(mu,4),depend(mu) :: wu
            real dimension(mv,4),depend(mv) :: wv
            integer dimension(mu),depend(mu) :: lu
            integer dimension(mv),depend(mv) :: lv
        end subroutine fpsuev
        subroutine fpsurf(iopt,m,x,y,z,w,xb,xe,yb,ye,kxx,kyy,s,nxest,nyest,eta,tol,maxit,nmax,km1,km2,ib1,ib3,nc,intest,nrest,nx0,tx,ny0,ty,c,fp,fp0,fpint,coord,f,ff,a,q,bx,by,spx,spy,h,index_bn,nummer,wrk,lwrk,ier) ! in :ddierckx:../fpsurf.f
            integer :: iopt
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            real dimension(m) :: x
            real dimension(m),depend(m) :: y
            real dimension(m),depend(m) :: z
            real dimension(m),depend(m) :: w
            real :: xb
            real :: xe
            real :: yb
            real :: ye
            integer :: kxx
            integer :: kyy
            real :: s
            integer :: nxest
            integer :: nyest
            real :: eta
            real :: tol
            integer :: maxit
            integer, optional,check(len(tx)>=nmax),depend(tx) :: nmax=len(tx)
            integer, optional,check(shape(spx,1)==km1),depend(spx) :: km1=shape(spx,1)
            integer, optional,check(shape(bx,1)==km2),depend(bx) :: km2=shape(bx,1)
            integer, optional,check(shape(a,1)==ib1),depend(a) :: ib1=shape(a,1)
            integer, optional,check(shape(q,1)==ib3),depend(q) :: ib3=shape(q,1)
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            integer, optional,check(len(fpint)>=intest),depend(fpint) :: intest=len(fpint)
            integer, optional,check(len(index_bn)>=nrest),depend(index_bn) :: nrest=len(index_bn)
            integer :: nx0
            real dimension(nmax) :: tx
            integer :: ny0
            real dimension(nmax),depend(nmax) :: ty
            real dimension(nc) :: c
            real :: fp
            real :: fp0
            real dimension(intest) :: fpint
            real dimension(intest),depend(intest) :: coord
            real dimension(nc),depend(nc) :: f
            real dimension(nc),depend(nc) :: ff
            real dimension(nc,ib1),depend(nc) :: a
            real dimension(nc,ib3),depend(nc) :: q
            real dimension(nmax,km2),depend(nmax) :: bx
            real dimension(nmax,km2),depend(nmax,km2) :: by
            real dimension(m,km1),depend(m) :: spx
            real dimension(m,km1),depend(m,km1) :: spy
            real dimension(ib3),depend(ib3) :: h
            integer dimension(nrest) :: index_bn
            integer dimension(m),depend(m) :: nummer
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer :: ier
        end subroutine fpsurf
        subroutine fpsysy(a,n,g) ! in :ddierckx:../fpsysy.f
            real dimension(6,6) :: a
            integer :: n
            real dimension(6) :: g
        end subroutine fpsysy
        subroutine fptrnp(m,mm,idim,n,nr,sp,p,b,z,a,q,right) ! in :ddierckx:../fptrnp.f
            integer, optional,check(len(nr)>=m),depend(nr) :: m=len(nr)
            integer :: mm
            integer :: idim
            integer, optional,check(shape(b,0)==n),depend(b) :: n=shape(b,0)
            integer dimension(m) :: nr
            real dimension(m,4),depend(m) :: sp
            real :: p
            real dimension(n,5) :: b
            real dimension(m*mm*idim),depend(m,mm,idim) :: z
            real dimension(n,5),depend(n) :: a
            real dimension((n-4)*mm*idim),depend(mm,idim,n) :: q
            real dimension(mm*idim),depend(mm,idim) :: right
        end subroutine fptrnp
        subroutine fptrpe(m,mm,idim,n,nr,sp,p,b,z,a,aa,q,right) ! in :ddierckx:../fptrpe.f
            integer, optional,check(len(nr)>=m),depend(nr) :: m=len(nr)
            integer :: mm
            integer :: idim
            integer, optional,check(shape(b,0)==n),depend(b) :: n=shape(b,0)
            integer dimension(m) :: nr
            real dimension(m,4),depend(m) :: sp
            real :: p
            real dimension(n,5) :: b
            real dimension(m*mm*idim),depend(m,mm,idim) :: z
            real dimension(n,5),depend(n) :: a
            real dimension(n,4),depend(n) :: aa
            real dimension((n-7)*mm*idim),depend(mm,idim,n) :: q
            real dimension(mm*idim),depend(mm,idim) :: right
        end subroutine fptrpe
        subroutine insert(iopt,t,n,c,k,x,tt,nn,cc,nest,ier) ! in :ddierckx:../insert.f
            integer :: iopt
            real dimension(nest) :: t
            integer :: n
            real dimension(nest),depend(nest) :: c
            integer :: k
            real :: x
            real dimension(nest),depend(nest) :: tt
            integer :: nn
            real dimension(nest),depend(nest) :: cc
            integer, optional,check(len(t)>=nest),depend(t) :: nest=len(t)
            integer :: ier
        end subroutine insert
        subroutine parcur(iopt,ipar,idim,m,u,mx,x,w,ub,ue,k,s,nest,n,t,nc,c,fp,wrk,lwrk,iwrk,ier) ! in :ddierckx:../parcur.f
            integer :: iopt
            integer :: ipar
            integer :: idim
            integer, optional,check(len(u)>=m),depend(u) :: m=len(u)
            real dimension(m) :: u
            integer, optional,check(len(x)>=mx),depend(x) :: mx=len(x)
            real dimension(mx) :: x
            real dimension(m),depend(m) :: w
            real :: ub
            real :: ue
            integer :: k
            real :: s
            integer, optional,check(len(t)>=nest),depend(t) :: nest=len(t)
            integer :: n
            real dimension(nest) :: t
            integer, optional,check(len(c)>=nc),depend(c) :: nc=len(c)
            real dimension(nc) :: c
            real :: fp
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer dimension(nest),depend(nest) :: iwrk
            integer :: ier
        end subroutine parcur
        subroutine parder(tx,nx,ty,ny,c,kx,ky,nux,nuy,x,mx,y,my,z,wrk,lwrk,iwrk,kwrk,ier) ! in :ddierckx:../parder.f
            real dimension(nx) :: tx
            integer, optional,check(len(tx)>=nx),depend(tx) :: nx=len(tx)
            real dimension(ny) :: ty
            integer, optional,check(len(ty)>=ny),depend(ty) :: ny=len(ty)
            real dimension((nx-kx-1)*(ny-ky-1)),depend(nx,ny,kx,ky) :: c
            integer :: kx
            integer :: ky
            integer :: nux
            integer :: nuy
            real dimension(mx) :: x
            integer, optional,check(len(x)>=mx),depend(x) :: mx=len(x)
            real dimension(my) :: y
            integer, optional,check(len(y)>=my),depend(y) :: my=len(y)
            real dimension(mx*my),depend(mx,my) :: z
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer dimension(kwrk) :: iwrk
            integer, optional,check(len(iwrk)>=kwrk),depend(iwrk) :: kwrk=len(iwrk)
            integer :: ier
        end subroutine parder
        subroutine parsur(iopt,ipar,idim,mu,u,mv,v,f,s,nuest,nvest,nu,tu,nv,tv,c,fp,wrk,lwrk,iwrk,kwrk,ier) ! in :ddierckx:../parsur.f
            integer :: iopt
            integer dimension(2) :: ipar
            integer :: idim
            integer, optional,check(len(u)>=mu),depend(u) :: mu=len(u)
            real dimension(mu) :: u
            integer, optional,check(len(v)>=mv),depend(v) :: mv=len(v)
            real dimension(mv) :: v
            real dimension(mu*mv*idim),depend(idim,mu,mv) :: f
            real :: s
            integer, optional,check(len(tu)>=nuest),depend(tu) :: nuest=len(tu)
            integer, optional,check(len(tv)>=nvest),depend(tv) :: nvest=len(tv)
            integer :: nu
            real dimension(nuest) :: tu
            integer :: nv
            real dimension(nvest) :: tv
            real dimension((nuest-4)*(nvest-4)*idim),depend(idim,nuest,nvest) :: c
            real :: fp
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer dimension(kwrk) :: iwrk
            integer, optional,check(len(iwrk)>=kwrk),depend(iwrk) :: kwrk=len(iwrk)
            integer :: ier
        end subroutine parsur
        subroutine percur(iopt,m,x,y,w,k,s,nest,n,t,c,fp,wrk,lwrk,iwrk,ier) ! in :ddierckx:../percur.f
            integer :: iopt
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            real dimension(m) :: x
            real dimension(m),depend(m) :: y
            real dimension(m),depend(m) :: w
            integer :: k
            real :: s
            integer, optional,check(len(t)>=nest),depend(t) :: nest=len(t)
            integer :: n
            real dimension(nest) :: t
            real dimension(nest),depend(nest) :: c
            real :: fp
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer dimension(nest),depend(nest) :: iwrk
            integer :: ier
        end subroutine percur
        subroutine pogrid(iopt,ider,mu,u,mv,v,z,z0,r,s,nuest,nvest,nu,tu,nv,tv,c,fp,wrk,lwrk,iwrk,kwrk,ier) ! in :ddierckx:../pogrid.f
            integer dimension(3) :: iopt
            integer dimension(2) :: ider
            integer, optional,check(len(u)>=mu),depend(u) :: mu=len(u)
            real dimension(mu) :: u
            integer, optional,check(len(v)>=mv),depend(v) :: mv=len(v)
            real dimension(mv) :: v
            real dimension(mu*mv),depend(mu,mv) :: z
            real :: z0
            real :: r
            real :: s
            integer, optional,check(len(tu)>=nuest),depend(tu) :: nuest=len(tu)
            integer, optional,check(len(tv)>=nvest),depend(tv) :: nvest=len(tv)
            integer :: nu
            real dimension(nuest) :: tu
            integer :: nv
            real dimension(nvest) :: tv
            real dimension((nuest-4)*(nvest-4)),depend(nuest,nvest) :: c
            real :: fp
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer dimension(kwrk) :: iwrk
            integer, optional,check(len(iwrk)>=kwrk),depend(iwrk) :: kwrk=len(iwrk)
            integer :: ier
        end subroutine pogrid
        subroutine polar(iopt,m,x,y,z,w,rad,s,nuest,nvest,eps,nu,tu,nv,tv,u,v,c,fp,wrk1,lwrk1,wrk2,lwrk2,iwrk,kwrk,ier) ! in :ddierckx:../polar.f
            use polar__user__routines
            integer dimension(3) :: iopt
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            real dimension(m) :: x
            real dimension(m),depend(m) :: y
            real dimension(m),depend(m) :: z
            real dimension(m),depend(m) :: w
            external rad
            real :: s
            integer, optional,check(len(tu)>=nuest),depend(tu) :: nuest=len(tu)
            integer, optional,check(len(tv)>=nvest),depend(tv) :: nvest=len(tv)
            real :: eps
            integer :: nu
            real dimension(nuest) :: tu
            integer :: nv
            real dimension(nvest) :: tv
            real dimension(m),depend(m) :: u
            real dimension(m),depend(m) :: v
            real dimension((nuest-4)*(nvest-4)),depend(nuest,nvest) :: c
            real :: fp
            real dimension(lwrk1) :: wrk1
            integer, optional,check(len(wrk1)>=lwrk1),depend(wrk1) :: lwrk1=len(wrk1)
            real dimension(lwrk2) :: wrk2
            integer, optional,check(len(wrk2)>=lwrk2),depend(wrk2) :: lwrk2=len(wrk2)
            integer dimension(kwrk) :: iwrk
            integer, optional,check(len(iwrk)>=kwrk),depend(iwrk) :: kwrk=len(iwrk)
            integer :: ier
        end subroutine polar
        subroutine profil(iopt,tx,nx,ty,ny,c,kx,ky,u,nu,cu,ier) ! in :ddierckx:../profil.f
            integer :: iopt
            real dimension(nx) :: tx
            integer, optional,check(len(tx)>=nx),depend(tx) :: nx=len(tx)
            real dimension(ny) :: ty
            integer, optional,check(len(ty)>=ny),depend(ty) :: ny=len(ty)
            real dimension((nx-kx-1)*(ny-ky-1)),depend(nx,ny,kx,ky) :: c
            integer :: kx
            integer :: ky
            real :: u
            integer, optional,check(len(cu)>=nu),depend(cu) :: nu=len(cu)
            real dimension(nu) :: cu
            integer :: ier
        end subroutine profil
        subroutine regrid(iopt,mx,x,my,y,z,xb,xe,yb,ye,kx,ky,s,nxest,nyest,nx,tx,ny,ty,c,fp,wrk,lwrk,iwrk,kwrk,ier) ! in :ddierckx:../regrid.f
            integer :: iopt
            integer, optional,check(len(x)>=mx),depend(x) :: mx=len(x)
            real dimension(mx) :: x
            integer, optional,check(len(y)>=my),depend(y) :: my=len(y)
            real dimension(my) :: y
            real dimension(mx*my),depend(mx,my) :: z
            real :: xb
            real :: xe
            real :: yb
            real :: ye
            integer :: kx
            integer :: ky
            real :: s
            integer, optional,check(len(tx)>=nxest),depend(tx) :: nxest=len(tx)
            integer, optional,check(len(ty)>=nyest),depend(ty) :: nyest=len(ty)
            integer :: nx
            real dimension(nxest) :: tx
            integer :: ny
            real dimension(nyest) :: ty
            real dimension((nxest-kx-1)*(nyest-ky-1)),depend(kx,ky,nxest,nyest) :: c
            real :: fp
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer dimension(kwrk) :: iwrk
            integer, optional,check(len(iwrk)>=kwrk),depend(iwrk) :: kwrk=len(iwrk)
            integer :: ier
        end subroutine regrid
        subroutine spalde(t,n,c,k1,x,d,ier) ! in :ddierckx:../spalde.f
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            real dimension(n-k1),depend(n,k1) :: c
            integer, optional,check(len(d)>=k1),depend(d) :: k1=len(d)
            real :: x
            real dimension(k1) :: d
            integer :: ier
        end subroutine spalde
        subroutine spgrid(iopt,ider,mu,u,mv,v,r,r0,r1,s,nuest,nvest,nu,tu,nv,tv,c,fp,wrk,lwrk,iwrk,kwrk,ier) ! in :ddierckx:../spgrid.f
            integer dimension(3) :: iopt
            integer dimension(4) :: ider
            integer, optional,check(len(u)>=mu),depend(u) :: mu=len(u)
            real dimension(mu) :: u
            integer, optional,check(len(v)>=mv),depend(v) :: mv=len(v)
            real dimension(mv) :: v
            real dimension(mu*mv),depend(mu,mv) :: r
            real :: r0
            real :: r1
            real :: s
            integer, optional,check(len(tu)>=nuest),depend(tu) :: nuest=len(tu)
            integer, optional,check(len(tv)>=nvest),depend(tv) :: nvest=len(tv)
            integer :: nu
            real dimension(nuest) :: tu
            integer :: nv
            real dimension(nvest) :: tv
            real dimension((nuest-4)*(nvest-4)),depend(nuest,nvest) :: c
            real :: fp
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer dimension(kwrk) :: iwrk
            integer, optional,check(len(iwrk)>=kwrk),depend(iwrk) :: kwrk=len(iwrk)
            integer :: ier
        end subroutine spgrid
        subroutine sphere(iopt,m,teta,phi,r,w,s,ntest,npest,eps,nt,tt,np,tp,c,fp,wrk1,lwrk1,wrk2,lwrk2,iwrk,kwrk,ier) ! in :ddierckx:../sphere.f
            integer :: iopt
            integer, optional,check(len(teta)>=m),depend(teta) :: m=len(teta)
            real dimension(m) :: teta
            real dimension(m),depend(m) :: phi
            real dimension(m),depend(m) :: r
            real dimension(m),depend(m) :: w
            real :: s
            integer, optional,check(len(tt)>=ntest),depend(tt) :: ntest=len(tt)
            integer, optional,check(len(tp)>=npest),depend(tp) :: npest=len(tp)
            real :: eps
            integer :: nt
            real dimension(ntest) :: tt
            integer :: np
            real dimension(npest) :: tp
            real dimension((ntest-4)*(npest-4)),depend(ntest,npest) :: c
            real :: fp
            real dimension(lwrk1) :: wrk1
            integer, optional,check(len(wrk1)>=lwrk1),depend(wrk1) :: lwrk1=len(wrk1)
            real dimension(lwrk2) :: wrk2
            integer, optional,check(len(wrk2)>=lwrk2),depend(wrk2) :: lwrk2=len(wrk2)
            integer dimension(kwrk) :: iwrk
            integer, optional,check(len(iwrk)>=kwrk),depend(iwrk) :: kwrk=len(iwrk)
            integer :: ier
        end subroutine sphere
        subroutine splder(t,n,c,k,nu,x,y,m,wrk,ier) ! in :ddierckx:../splder.f
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            real dimension(n-k-1),depend(n,k) :: c
            integer :: k
            integer :: nu
            real dimension(m) :: x
            real dimension(m),depend(m) :: y
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            real dimension(n),depend(n) :: wrk
            integer :: ier
        end subroutine splder
        subroutine splev(t,n,c,k,x,y,m,ier) ! in :ddierckx:../splev.f
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            real dimension(n-k-1),depend(n,k) :: c
            integer :: k
            real dimension(m) :: x
            real dimension(m),depend(m) :: y
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            integer :: ier
        end subroutine splev
        subroutine splevv(t,n,c,k,x,y,m,p,ier) ! in :ddierckx:../splevv.f
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            real dimension((n-k-1)*p),depend(n,k,p) :: c
            integer :: k
            real dimension(m) :: x
            real dimension(p*m),depend(m,p) :: y
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            integer :: p
            integer :: ier
        end subroutine splevv
        function splint(t,n,c,k,a,b,wrk) ! in :ddierckx:../splint.f
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            real dimension(n-k-1),depend(n,k) :: c
            integer :: k
            real :: a
            real :: b
            real dimension(n),depend(n) :: wrk
            real :: splint
        end function splint
        subroutine sproot(t,n,c,zero,mest,m,ier) ! in :ddierckx:../sproot.f
            real dimension(n) :: t
            integer, optional,check(len(t)>=n),depend(t) :: n=len(t)
            real dimension(n - 4),depend(n) :: c
            real dimension(mest) :: zero
            integer, optional,check(len(zero)>=mest),depend(zero) :: mest=len(zero)
            integer intent(out) :: m
            integer :: ier
        end subroutine sproot
        subroutine surev(idim,tu,nu,tv,nv,c,u,mu,v,mv,f,mf,wrk,lwrk,iwrk,kwrk,ier) ! in :ddierckx:../surev.f
            integer :: idim
            real dimension(nu) :: tu
            integer, optional,check(len(tu)>=nu),depend(tu) :: nu=len(tu)
            real dimension(nv) :: tv
            integer, optional,check(len(tv)>=nv),depend(tv) :: nv=len(tv)
            real dimension((nu-4)*(nv-4)*idim),depend(idim,nu,nv) :: c
            real dimension(mu) :: u
            integer, optional,check(len(u)>=mu),depend(u) :: mu=len(u)
            real dimension(mv) :: v
            integer, optional,check(len(v)>=mv),depend(v) :: mv=len(v)
            real dimension(mf) :: f
            integer, optional,check(len(f)>=mf),depend(f) :: mf=len(f)
            real dimension(lwrk) :: wrk
            integer, optional,check(len(wrk)>=lwrk),depend(wrk) :: lwrk=len(wrk)
            integer dimension(kwrk) :: iwrk
            integer, optional,check(len(iwrk)>=kwrk),depend(iwrk) :: kwrk=len(iwrk)
            integer :: ier
        end subroutine surev
        subroutine surfit(iopt,m,x,y,z,w,xb,xe,yb,ye,kx,ky,s,nxest,nyest,nmax,eps,nx,tx,ny,ty,c,fp,wrk1,lwrk1,wrk2,lwrk2,iwrk,kwrk,ier) ! in :ddierckx:../surfit.f
            integer :: iopt
            integer, optional,check(len(x)>=m),depend(x) :: m=len(x)
            real dimension(m) :: x
            real dimension(m),depend(m) :: y
            real dimension(m),depend(m) :: z
            real dimension(m),depend(m) :: w
            real :: xb
            real :: xe
            real :: yb
            real :: ye
            integer :: kx
            integer :: ky
            real :: s
            integer :: nxest
            integer :: nyest
            integer, optional,check(len(tx)>=nmax),depend(tx) :: nmax=len(tx)
            real :: eps
            integer :: nx
            real dimension(nmax) :: tx
            integer :: ny
            real dimension(nmax),depend(nmax) :: ty
            real dimension((nxest-kx-1)*(nyest-ky-1)),depend(kx,ky,nxest,nyest) :: c
            real :: fp
            real dimension(lwrk1) :: wrk1
            integer, optional,check(len(wrk1)>=lwrk1),depend(wrk1) :: lwrk1=len(wrk1)
            real dimension(lwrk2) :: wrk2
            integer, optional,check(len(wrk2)>=lwrk2),depend(wrk2) :: lwrk2=len(wrk2)
            integer dimension(kwrk) :: iwrk
            integer, optional,check(len(iwrk)>=kwrk),depend(iwrk) :: kwrk=len(iwrk)
            integer :: ier
        end subroutine surfit
    end interface 
end python module ddierckx

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
